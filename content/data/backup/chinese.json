{
  "db": [
    {
      "meta": {
        "version": "2.4.0"
      },
      "data": {
        "posts": [
          {
            "title": "服务端开发基础",
            "slug": "backend-essential",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"code\":\"webpage=>operation: 网页开发\nwebsite=>operation: 网站开发\napplication=>operation: 应用开发\n\nwebpage(right)->website(right)->application\n\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/web-server.png#wide\",\"alt\":\"Web Server\",\"title\":\"\"}],[\"code\",{\"code\":\"# 注意：需要使用管理员身份运行命令行！！！\n# 切换到 Apache 解压路径中的 bin 目录\n$ cd <解压目录>/bin\n# 安装 Apache 服务，-n 参数是指定服务名称\n$ httpd.exe -k install -n \"Apache\"\n# 如果需要卸载 Apache，可以执行以下命令\n$ httpd.exe -k uninstall -n \"Apache\"\n\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1505988989079.png\",\"alt\":\"1505988989079\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1505995465005.png\",\"alt\":\"1505995465005\",\"title\":\"\"}],[\"code\",{\"code\":\"$ httpd.exe -t\n\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1505995651671.png\",\"alt\":\"1505995651671\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1505996335305.png\",\"alt\":\"1505996335305\",\"title\":\"\"}],[\"code\",{\"code\":\"# 注意：需要使用管理员身份运行命令行！！！\n$ httpd.exe -k start -n \"Apache\"\n# 重新启动 Apache 服务\n$ httpd.exe -k restart -n \"Apache\"\n# 停止 Apache 服务\n$ httpd.exe -k stop -n \"Apache\"\n\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1505997349857.png\",\"alt\":\"1505997349857\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/single-network.png\",\"alt\":\"单个局域网情况\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/multiple-network.png\",\"alt\":\"multiple-network\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/http-req-res.png\",\"alt\":\"HTTP请求和响应\",\"title\":\"\",\"cardWidth\":\"wide\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1506132097583.png\",\"alt\":\"1506132097583\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1505998898900.png\",\"alt\":\"1505998898900\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1506132675132.png\",\"alt\":\"1506132675132\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1505999461533.png\",\"alt\":\"1505999461533\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1506136421939.png\",\"alt\":\"1506136421939\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1506001971125.png\",\"alt\":\"1506001971125\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/apache-process.png#full\",\"alt\":\"apache-process\",\"title\":\"\",\"cardWidth\":\"full\"}],[\"code\",{\"code\":\"<!-- demo.php -->\n<?php echo 'Hello PHP'; ?>\n\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/1506004529597.png\",\"alt\":\"1506004529597\",\"title\":\"\"}],[\"image\",{\"src\":\"https://zce-sandbox.uieee.com/2018/10/apache-php.png\",\"alt\":\"apache-php\",\"title\":\"\"}]],\"markups\":[[\"strong\"],[\"a\",[\"href\",\"https://www.apachelounge.com/download/\"]],[\"a\",[\"href\",\"https://httpd.apache.org/docs/current/platform/windows.html\"]],[\"code\"],[\"a\",[\"href\",\"http://localhost/%EF%BC%8C%E5%9B%9E%E8%BD%A6%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%BF%99%E6%97%B6%E6%AD%A3%E5%B8%B8%E5%BA%94%E8%AF%A5%E7%9C%8B%E5%88%B0\"]],[\"a\",[\"href\",\"http://httpd.apache.org/docs/current/\"]],[\"a\",[\"href\",\"http://skypegnu1.blog.51cto.com/8991766/1532454\"]]],\"sections\":[[1,\"h2\",[[0,[],0,\"建立你的第一个网站（目标）\"]]],[1,\"blockquote\",[[0,[0],1,\"前端开发\"],[0,[],0,\"最终还是属于\"],[0,[0],1,\"Web 开发\"],[0,[],0,\"中的一个分支，想要成为一名合格的前端开发人员，就必须要\"],[0,[0],1,\"充分理解 Web 的概念\"],[0,[],0,\"。\"]]],[1,\"p\",[[0,[],0,\"构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的 Blog 网站并不难（其实再大的系统也是由一些基础功能叠加出来的），所以咱们就从这个话题开始聊。\"]]],[1,\"h2\",[[0,[],0,\"如何建立一个 Blog 网站\"]]],[1,\"blockquote\",[[0,[],0,\"提问：到底什么是网站？可以在浏览器上通过一个地址直接访问使用用于提供一种（或多种）特定服务的一系列具备相关性的网页组合的整体例如：博客、门户、电商、在线教育等\"]]],[1,\"p\",[[0,[],0,\"有了明确的目标过后，我们需要规划具体的业务方案，学习特定的技能，完成各项功能，解决各种过程中出现的问题。\"]]],[1,\"h3\",[[0,[],0,\"之前学习了什么？\"]]],[1,\"p\",[[0,[],0,\"在之前的学习过程中，我们很专注，没有关心这些东西在整体中是什么角色，起到什么作用。这里我们是时候总结一下我们之前学过了的内容：\"]]],[3,\"ul\",[[[0,[],0,\"网页开发技术（硬性）  HTML —— 网页内容结构（GUI） CSS —— 网页外观样式（GUI） JavaScript —— 编程语言，可以用于调用浏览器提供的 API Web APIs —— 网页交互（业务功能）DOM BOM jQuery —— 糖果而已，不是必要的  \"]],[[0,[],0,\"编程能力 / 编程思想 / 解决问题的思路（软性）  我要做什么（我要得到什么），我目前有什么（我能拿到什么）  \"]]]],[1,\"p\",[[0,[],0,\"至此，我们已经可以独立完成网页开发了，具体能完成的东西就是一个一个的网页，而且还能给这个页面加上一些动态的交互。但是这距离成为一个网站还有一些路要走。\"]]],[10,0],[1,\"h3\",[[0,[],0,\"还需要学习什么？\"]]],[1,\"p\",[[0,[],0,\"想要完成完整的 Web 网站，还需要学习什么？\"]]],[3,\"ul\",[[[0,[],0,\"搭建 WEB 服务器\"]],[[0,[],0,\"HTTP（浏览器与服务端的通讯协议）\"]],[[0,[],0,\"服务端开发（动态网页技术）\"]],[[0,[],0,\"数据库操作\"]],[[0,[],0,\"AJAX（浏览器与服务端的数据交互方式）\"]]]],[1,\"h2\",[[0,[],0,\"搭建 Web 服务器\"]]],[1,\"blockquote\",[[0,[],0,\"服务器（提供服务）指的就是一台\"],[0,[0],1,\"安装特定的软件的公共计算机\"],[0,[],0,\"，用于专门用于提供特定的服务。 按照服务类型的不同，又划分为：Web 服务器、数据库服务器、文件服务器等等。客户端（使用服务）指的是在一次服务过程中使用这个服务的设备（网络端点）。 目前咱们最常见的客户端就是浏览器\"]]],[1,\"p\",[[0,[],0,\"我们手头上的这些网页，如果想要成为一个网站，首先要完成的第一件事就是有一台公共的 Web 服务器，把这一系列的页面放到这台 Web 服务器上，让用户可以通过服务器的地址访问到这些网页。\"]]],[10,1],[1,\"blockquote\",[[0,[],0,\"提问：为什么不放在我们自己电脑上呢？\"]]],[1,\"p\",[[0,[],0,\"那么，哪里有这样的服务器呢？\"]]],[1,\"p\",[[0,[],0,\"我们手头上的电脑都可以是一台服务器，因为服务器是一个相对的概念，只要能提供服务就可以是一个服务器（提供服务的时候就是服务端，使用服务的时候就是客户端）。\"]]],[1,\"p\",[[0,[],0,\"既然服务器就是安装特定的软件的计算机，那么要让自己的成为 Web 服务器就是要安装一个 Web 服务器软件。\"]]],[1,\"h3\",[[0,[],0,\"Web 服务器软件\"]]],[3,\"ul\",[[[0,[],0,\"Nginx ········································ 反向代理\"]],[[0,[],0,\"Apache ····································· PHP\"]],[[0,[],0,\"IIS ·············································· ASP.NET\"]],[[0,[],0,\"Tomcat  ····································· Java\"]]]],[1,\"h3\",[[0,[],0,\"安装 Web 服务器软件\"]]],[1,\"p\",[[0,[],0,\"这里我们选择一个比较常用的 Web 服务器软件：Apache HTTP Server。\"]]],[1,\"blockquote\",[[0,[],0,\"如果使用的是安装版，与其他软件相同，安装无外乎就是一路点下一步，只是需要注意安装目录路径中不要有中文。\"]]],[1,\"p\",[[0,[],0,\"由于最新的 Apache 已经不提供 Windows 的安装版本了，所以我们这里使用的是解压版。\"]]],[1,\"blockquote\",[[0,[],0,\"下载地址：\"],[0,[1],1,\"https://www.apachelounge.com/download/\"],[0,[],0,\"使用说明：\"],[0,[2],1,\"https://httpd.apache.org/docs/current/platform/windows.html\"]]],[1,\"p\",[[0,[],0,\"安装方式如下，先解压到纯英文路径的文件夹，然后执行以下命令：\"]]],[10,2],[1,\"p\",[[0,[],0,\"执行安装命令过后会报一个错，原因是默认的配置文件有问题，需要先调整一下配置文件 \"],[0,[3],1,\"conf/httpd.conf\"],[0,[],0,\"，才能正常启动服务。\"]]],[10,3],[1,\"p\",[[0,[],0,\"找到 Apache 解压目录中的 conf 目录下的 httpd.conf 文件，定位到 37 行，将 \"],[0,[3],1,\"c:/Apache24\"],[0,[],0,\" 改为解压目录，我这里解压到路径是 \"],[0,[3],1,\"C:/Develop/apache\"],[0,[],0,\"，所以我这里修改\"]]],[10,4],[1,\"p\",[[0,[],0,\"修改完以后，执行以下命令重新测试配置文件是否通过。\"]]],[10,5],[1,\"p\",[[0,[],0,\"这里任然报错：\"]]],[10,6],[1,\"p\",[[0,[],0,\"通过错误信息得知，这里是因为另外一个地方配置的目录不存在导致的，所以接着调整 246 行的 \"],[0,[3],1,\"DocumentRoot\"],[0,[],0,\" 选项：\"]]],[10,7],[1,\"p\",[[0,[],0,\"随即，我们发现这个配置文件中有很多默认配置选项中的路径都是 \"],[0,[3],1,\"c:/Apache24\"],[0,[],0,\"，所以我们批量都修改为我们解压的目录路径。\"]]],[1,\"p\",[[0,[],0,\"然后重新执行 \"],[0,[3],1,\"httpd.exe -t\"],[0,[],0,\" 测试配置文件，这时候应该提示 \"],[0,[3],1,\"Syntax OK\"],[0,[],0,\"。\"]]],[1,\"blockquote\",[[0,[],0,\"如果有关于 \"],[0,[3],1,\"ServerName\"],[0,[],0,\" 的警告提示，不用管它，暂时还不会影响我们接下来的使用和操作。\"]]],[1,\"p\",[[0,[],0,\"接着运行以下命令重新启动 Apache 服务：\"]]],[10,8],[1,\"p\",[[0,[],0,\"回到浏览器中，地址栏输入：\"],[0,[4],1,\"http://localhost/，回车访问，这时正常应该看到\"],[0,[],0,\" \"],[0,[3],1,\"It works!\"]]],[10,9],[1,\"h3\",[[0,[],0,\"提供 Web 服务\"]]],[1,\"p\",[[0,[],0,\"启动 Apache，让别人可以使用你机器上安装的 Apache 提供的 Web 服务，访问你机器上的网站。\"],[0,[0],1,\"这种情况下你的机器就是服务器，别人的机器就是客户端\"],[0,[],0,\"。\"]]],[1,\"p\",[[0,[0],1,\"注意\"],[0,[],0,\"：\"]]],[3,\"ul\",[[[0,[],0,\"确保配置文件语法检查通过\"]],[[0,[],0,\"确保 \"],[0,[3],1,\"80\"],[0,[],0,\" 端口没有被其他程序占用\"]],[[0,[],0,\"确保防火墙允许 \"],[0,[3],1,\"80\"],[0,[],0,\" 端口的请求，或者干脆关掉防火墙\"]],[[0,[],0,\"如果出现 \"],[0,[0],1,\"Forbidden\"],[0,[],0,\" 情况，确保配置文件 \"],[0,[3],1,\"httpd.conf\"],[0,[],0,\" 中 247 行（\"],[0,[3],1,\"DocumentRoot\"],[0,[],0,\" 之后）的 \"],[0,[3],1,\"Directory\"],[0,[],0,\" 配置的与 \"],[0,[3],1,\"DocumentRoot\"],[0,[],0,\" 路径相同\"]],[[0,[],0,\"我们在开发阶段大多数都是自己访问自己机器上的网站，那这种情况下，我们既是服务端又是客户端。**对于新手来说，最常见的问题就是分不清楚哪是客户端应该有的，哪是服务端应该有的。**这种时候一定要保持清醒，客户端就是浏览器能看到的，代码以及 Apache 相关的文件和配置都是服务端的。\"]]]],[1,\"h2\",[[0,[],0,\"网络基础概念（必要）\"]]],[1,\"h3\",[[0,[],0,\"IP 地址\"]]],[1,\"blockquote\",[[0,[],0,\"Internet Protocol Address\"]]],[1,\"p\",[[0,[],0,\"设备在某一个网络中的地址，目前最常见的格式：\"],[0,[3],1,\"[0-255].[0-255].[0-255].[0-255]\"],[0,[],0,\" 即为四个 0-255 的数字组成。\"]]],[1,\"p\",[[0,[],0,\"作用就是标识一个网络设备（计算机、手机、电视）在\"],[0,[0],1,\"某一个具体的网络\"],[0,[],0,\"当中的地址。\"]]],[1,\"p\",[[0,[],0,\"127.0.0.1 是本地回环地址\"]]],[1,\"h4\",[[0,[],0,\"单个网络情况\"]]],[1,\"p\",[[0,[],0,\"在单个局域网下，结构非常简单，就是我们所连接的网络设备（网关）给我们分配了一个地址，在\"],[0,[0],1,\"这个范围之内\"],[0,[],0,\"我们都可以通过这个地址找到我们的这个设备。\"]]],[10,10],[1,\"h4\",[[0,[],0,\"多个网络情况\"]]],[1,\"p\",[[0,[],0,\"但是当一个设备同时处于多个网络下（比如同时连接了有线网卡和无线网卡），就会变得稍微复杂一点：\"]]],[10,11],[1,\"blockquote\",[[0,[],0,\"例如：小明这个同学同时报名了两个课程，在 A 班级小明是班长，所有 A 班级的同学都管他叫班长（叫班长就能找到他）。而在 B 班级小明是课代表，所有 B 班的同学都管他叫课代表（叫课代表就能找到他）。同样的一个人在不同的环境有不同的身份，这些身份只有特定的环境才生效。\"]]],[1,\"blockquote\",[[0,[],0,\"纸上得来终觉浅，绝知此事要躬行！多尝试，多思考才能更好的理解这个问题。\"]]],[1,\"h3\",[[0,[],0,\"域名\"]]],[1,\"p\",[[0,[],0,\"由于 IP 地址都是没有规律的一些数字组成的，很难被人记住，不利于传播，所以就有人想出来要给 IP 起名字（别名）。\"]]],[1,\"blockquote\",[[0,[],0,\"域名是需要花钱注册的\"]]],[1,\"h3\",[[0,[],0,\"DNS\"]]],[1,\"p\",[[0,[],0,\"通过宽带运营商提供的服务器解析一个域名背后对应的 IP，这个过程叫做 \"],[0,[0],1,\"DNS 寻址\"],[0,[],0,\"，帮你完成 DNS 寻址过程的服务器叫做 \"],[0,[0],1,\"DNS 服务器\"],[0,[],0,\"。\"]]],[1,\"blockquote\",[[0,[3],1,\"C:\\Windows\\System32\\drivers\\etc\\hosts\"],[0,[],0,\" 文件是本机的 DNS 依据\"],[0,[0],1,\"注意\"],[0,[],0,\"：只能影响本机的 DNS 寻址必须以管理员权限运行的编辑器才有权利修改 \"],[0,[3],1,\"hosts\"],[0,[],0,\" 文件\"]]],[1,\"h3\",[[0,[],0,\"端口\"]]],[1,\"p\",[[0,[],0,\"计算机本身是一个封闭的环境，就像是一个大楼，如果需要有数据通信往来，必须有门，这个门在术语中就叫端口，每一个端口都有一个编号（0-65535）\"]]],[1,\"blockquote\",[[0,[],0,\"可以通过 \"],[0,[3],1,\"netstat\"],[0,[],0,\" 监视本机端口使用情况占门过程叫做监听http 默认的端口 80https 默认的端口是 443\"]]],[1,\"h2\",[[0,[],0,\"请求响应流程\"]]],[10,12],[3,\"ol\",[[[0,[],0,\"用户打开浏览器\"]],[[0,[],0,\"地址栏输入我们需要访问的网站网址（URL）\"]],[[0,[],0,\"浏览器通过 DNS 服务器获取即将访问的网站 IP\"]],[[0,[],0,\"浏览器发起一个对这个 IP 的请求\"]],[[0,[],0,\"服务端接收到这个请求，进行相应的处理（如果是静态文件请求，就读取这个文件）\"]],[[0,[],0,\"服务端将处理完的结果返回给客户端浏览器\"]],[[0,[],0,\"浏览器将服务端返回的结果呈现到界面上\"]]]],[1,\"h2\",[[0,[],0,\"配置 Apache\"]]],[1,\"blockquote\",[[0,[],0,\"配置文档：\"],[0,[5],1,\"http://httpd.apache.org/docs/current/\"],[0,[],0,\"配置文件中行首的 \"],[0,[3],1,\"#\"],[0,[],0,\" 指的是注释\"]]],[1,\"h3\",[[0,[],0,\"监听端口\"]]],[1,\"p\",[[0,[0],1,\"监听端口\"],[0,[],0,\"可以随意修改为任意一个未被其他程序监听的端口，可以通过设置配置文件 \"],[0,[3],1,\"httpd.conf\"],[0,[],0,\" 中的 \"],[0,[3],1,\"Listen\"],[0,[],0,\" 指令后面的数字修改。\"]]],[10,13],[1,\"h3\",[[0,[],0,\"网站根目录\"]]],[1,\"blockquote\",[[0,[0],1,\"网站根目录\"],[0,[],0,\"就是存放我们网站文件的最顶层目录，通常 URL 中域名后面的第一个斜线对应（映射）的就是网站根目录。\"],[0,[0],1,\"注\"],[0,[],0,\"：动态网站情况会比较特殊，需要单独考虑，不一定是这个规则。默认文档指的是我们在在访问一个目录时（没有指定其他访问哪个文件），默认返回的文件叫做默认文档\"]]],[1,\"p\",[[0,[],0,\"默认 Apache 的网站根目录是安装目录中的 \"],[0,[3],1,\"htdocs\"],[0,[],0,\" 文件夹，为了方便对网站文件的管理，一般我们会将其设置在一个自定义目录中（如果你不介意其实也无所谓）。\"]]],[1,\"p\",[[0,[],0,\"如果需要设置网站根目录，可以通过修改配置文件 \"],[0,[3],1,\"httpd.conf\"],[0,[],0,\" 中的网站根目录选项切换。\"]]],[10,14],[1,\"h3\",[[0,[],0,\"默认文档\"]]],[1,\"blockquote\",[[0,[],0,\"当客户端访问的是一个目录而不是具体文件时，服务端默认返回这个目录下的某个文档（文件），这个文档就称之为\"],[0,[0],1,\"默认文档\"],[0,[],0,\"。\"]]],[1,\"p\",[[0,[],0,\"配置文件 \"],[0,[3],1,\"httpd.conf\"],[0,[],0,\" 的 280 行的 \"],[0,[3],1,\"DirectoryIndex\"],[0,[],0,\"，默认文档可以配置多个（有前到后依次去找，找到为止，如果没找到任何一个则启用目录浏览）：\"]]],[10,15],[1,\"h3\",[[0,[],0,\"虚拟主机\"]]],[1,\"p\",[[0,[],0,\"如果一台机器上只有一个网站的话，没有任何问题，但是如果想要在一台机器上部署多个站点，就必须通过配置虚拟主机的方式解决。\"]]],[1,\"blockquote\",[[0,[],0,\"由于后期对虚拟主机的配置操作非常常见，所以我们一般将虚拟主机的配置单独放到一个配置文件中，然后在主配置文件中引入，避免破坏主配置文件中的其他配置。\"],[0,[3],1,\"Include conf/extra/httpd-vhosts.conf\"],[0,[],0,\" 配置的作用就将另外一个配置文件引入（使其生效）\"]]],[1,\"p\",[[0,[],0,\"具体的操作方式就是在主配置文件 \"],[0,[3],1,\"httpd.conf\"],[0,[],0,\" 的 505 行取消注释：\"]]],[10,16],[1,\"p\",[[0,[],0,\"然后找到 Apache 的虚拟主机配置文件，添加一个如下的虚拟主机配置节点，然后重新启动 Apache。\"]]],[1,\"blockquote\",[[0,[],0,\"这个文件中有两个默认的示例配置，可以注释掉\"]]],[10,17],[1,\"p\",[[0,[],0,\"如果真的要使用 \"],[0,[3],1,\"baixiu.com\"],[0,[],0,\" 这个域名的话，就只能通过修改 \"],[0,[3],1,\"hosts\"],[0,[],0,\" 文件达到目的，原因很简单：这个域名不是我们自己的，我们没有办法修改这个域名在公网上的 DNS。\"]]],[1,\"blockquote\",[[0,[],0,\"注意：如果使用了虚拟主机，则默认必须全部使用虚拟主机，即之前的默认网站也必须通过虚拟主机方式配置，否则访问不到。参考：\"],[0,[6],1,\"http://skypegnu1.blog.51cto.com/8991766/1532454\"],[0,[],0,\"如果虚拟主机的端口使用的不是 \"],[0,[3],1,\"80\"],[0,[],0,\"，则需要在主配置文件中添加一个对这个端口的监听：\"]]],[10,18],[1,\"h2\",[[0,[],0,\"静态网站与动态网站\"]]],[1,\"p\",[[0,[],0,\"至此，我们已经可以把这些静态页面放到服务器上了，客户端也可以通过域名请求这个网站，但是对于我们来说，Apache 能够完成的事情过于简单，无外乎就是找到你请求对应的文件 → 读取文件 → 将文件内容响应给客户端浏览器（\"],[0,[0],1,\"文件原封不动的给你\"],[0,[],0,\"）。无法满足让网页内容动起来（动态变化）的需求。\"]]],[1,\"p\",[[0,[],0,\"于是乎，就有人提出了服务端动态网页的概念，这种实现这种概念的技术有很多种：JSP、ASP.NET、PHP、Node 等等。\"]]],[1,\"p\",[[0,[],0,\"这些技术的原理就是：不再将 HTML 固定写死，每次用户请求时，动态执行一段代码，临时生成一个用户想要的 HTML 页面。\"]]],[10,19],[1,\"p\",[[0,[0],1,\"动态网站指的也就是每次请求时服务端动态生成 HTML 返回给用户的这种网站。\"]]],[1,\"p\",[[0,[],0,\"这里我们选择 PHP 作为我们了解服务端动态网页开发的技术方案，注意：我们学习的重心不在 PHP，而是了解服务端开发，以及某些其他对前端开发有帮助的东西。\"]]],[1,\"h3\",[[0,[],0,\"配置 PHP 支持\"]]],[1,\"blockquote\",[[0,[],0,\"PHP 文件的扩展名就是 \"],[0,[3],1,\".php\"]]],[1,\"p\",[[0,[],0,\"我们可以尝试在刚刚配置的网站中添加一个扩展名为 \"],[0,[3],1,\"php\"],[0,[],0,\" 的文件，然后到浏览器中访问它。\"]]],[10,20],[1,\"p\",[[0,[],0,\"结果出乎意料，并没有显示我们想要的 \"],[0,[3],1,\"Hello PHP\"],[0,[],0,\"，而是将我们的代码原封不动的返回给浏览器了。\"]]],[10,21],[1,\"p\",[[0,[],0,\"原因很简单：Apache 只能处理静态文件请求，对于后缀名为 \"],[0,[3],1,\".php\"],[0,[],0,\" 这种动态文件，它无法执行，所以就当成是一个静态文件直接返回了。\"]]],[1,\"p\",[[0,[0],1,\"解决方法\"],[0,[],0,\"：\"]]],[3,\"ul\",[[[0,[],0,\" 在服务器上安装 PHP  解压 php 到纯英文路径目录中  \"]],[[0,[],0,\" 在 Apache 中添加支持 PHP 的配置   在 Apache 添加 PHP 处理模块 \"],[0,[3],1,\"# php support LoadModule php7_module C:/Develop/php/php7apache2_4.dll \"],[0,[],0,\"   在 \"],[0,[3],1,\"<IfModule mime_module>\"],[0,[],0,\" 节点中添加 \"],[0,[3],1,\".php\"],[0,[],0,\" 扩展名解析支持 \"],[0,[3],1,\"# parse .php files AddType application/x-httpd-php .php \"],[0,[],0,\"   默认文档配置节点 \"],[0,[3],1,\"<IfModule dir_module>\"],[0,[],0,\" 中添加 \"],[0,[3],1,\"index.php\"],[0,[],0,\"  默认文档指的是在访问一个目录而不是具体文件名时，默认执行的文件名  \"],[0,[3],1,\"<IfModule dir_module>     DirectoryIndex index.html index.php </IfModule> \"],[0,[],0,\" ​   \"]],[[0,[],0,\" 重启 Apache \"]]]],[10,22],[1,\"blockquote\",[[0,[],0,\"可以理解成 Apache 是一家没有太多能力的公司，只能处理一些简单的业务，但是心很大想做更多的事，所以就想到了外包，所有额外的业务都需要外包给其他程序（而 PHP 就是一个专门能处理 php 这个业务的外包公司）\"]]],[1,\"h2\",[[0,[],0,\"作业\"]]],[3,\"ul\",[[[0,[],0,\"安装 Apache 并配置，确保本机可以访问。\"]],[[0,[],0,\"同桌相互访问对方提供的 Web 服务。\"]],[[0,[],0,\"让 Apache 支持 php 文件的运行。\"]]]]]}",
            "html": "<h2 id=\"-\">建立你的第一个网站（目标）</h2><blockquote><strong>前端开发</strong>最终还是属于<strong>Web 开发</strong>中的一个分支，想要成为一名合格的前端开发人员，就必须要<strong>充分理解 Web 的概念</strong>。</blockquote><p>构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的 Blog 网站并不难（其实再大的系统也是由一些基础功能叠加出来的），所以咱们就从这个话题开始聊。</p><h2 id=\"-blog-\">如何建立一个 Blog 网站</h2><blockquote>提问：到底什么是网站？可以在浏览器上通过一个地址直接访问使用用于提供一种（或多种）特定服务的一系列具备相关性的网页组合的整体例如：博客、门户、电商、在线教育等</blockquote><p>有了明确的目标过后，我们需要规划具体的业务方案，学习特定的技能，完成各项功能，解决各种过程中出现的问题。</p><h3 id=\"--1\">之前学习了什么？</h3><p>在之前的学习过程中，我们很专注，没有关心这些东西在整体中是什么角色，起到什么作用。这里我们是时候总结一下我们之前学过了的内容：</p><ul><li>网页开发技术（硬性）  HTML —— 网页内容结构（GUI） CSS —— 网页外观样式（GUI） JavaScript —— 编程语言，可以用于调用浏览器提供的 API Web APIs —— 网页交互（业务功能）DOM BOM jQuery —— 糖果而已，不是必要的  </li><li>编程能力 / 编程思想 / 解决问题的思路（软性）  我要做什么（我要得到什么），我目前有什么（我能拿到什么）  </li></ul><p>至此，我们已经可以独立完成网页开发了，具体能完成的东西就是一个一个的网页，而且还能给这个页面加上一些动态的交互。但是这距离成为一个网站还有一些路要走。</p><pre><code>webpage=&gt;operation: 网页开发\nwebsite=&gt;operation: 网站开发\napplication=&gt;operation: 应用开发\n\nwebpage(right)-&gt;website(right)-&gt;application\n</code></pre><h3 id=\"--2\">还需要学习什么？</h3><p>想要完成完整的 Web 网站，还需要学习什么？</p><ul><li>搭建 WEB 服务器</li><li>HTTP（浏览器与服务端的通讯协议）</li><li>服务端开发（动态网页技术）</li><li>数据库操作</li><li>AJAX（浏览器与服务端的数据交互方式）</li></ul><h2 id=\"-web-\">搭建 Web 服务器</h2><blockquote>服务器（提供服务）指的就是一台<strong>安装特定的软件的公共计算机</strong>，用于专门用于提供特定的服务。 按照服务类型的不同，又划分为：Web 服务器、数据库服务器、文件服务器等等。客户端（使用服务）指的是在一次服务过程中使用这个服务的设备（网络端点）。 目前咱们最常见的客户端就是浏览器</blockquote><p>我们手头上的这些网页，如果想要成为一个网站，首先要完成的第一件事就是有一台公共的 Web 服务器，把这一系列的页面放到这台 Web 服务器上，让用户可以通过服务器的地址访问到这些网页。</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/web-server.png#wide\" class=\"kg-image\" alt=\"Web Server\"></figure><blockquote>提问：为什么不放在我们自己电脑上呢？</blockquote><p>那么，哪里有这样的服务器呢？</p><p>我们手头上的电脑都可以是一台服务器，因为服务器是一个相对的概念，只要能提供服务就可以是一个服务器（提供服务的时候就是服务端，使用服务的时候就是客户端）。</p><p>既然服务器就是安装特定的软件的计算机，那么要让自己的成为 Web 服务器就是要安装一个 Web 服务器软件。</p><h3 id=\"web-\">Web 服务器软件</h3><ul><li>Nginx ········································ 反向代理</li><li>Apache ····································· PHP</li><li>IIS ·············································· ASP.NET</li><li>Tomcat  ····································· Java</li></ul><h3 id=\"-web--1\">安装 Web 服务器软件</h3><p>这里我们选择一个比较常用的 Web 服务器软件：Apache HTTP Server。</p><blockquote>如果使用的是安装版，与其他软件相同，安装无外乎就是一路点下一步，只是需要注意安装目录路径中不要有中文。</blockquote><p>由于最新的 Apache 已经不提供 Windows 的安装版本了，所以我们这里使用的是解压版。</p><blockquote>下载地址：<a href=\"https://www.apachelounge.com/download/\">https://www.apachelounge.com/download/</a>使用说明：<a href=\"https://httpd.apache.org/docs/current/platform/windows.html\">https://httpd.apache.org/docs/current/platform/windows.html</a></blockquote><p>安装方式如下，先解压到纯英文路径的文件夹，然后执行以下命令：</p><pre><code># 注意：需要使用管理员身份运行命令行！！！\n# 切换到 Apache 解压路径中的 bin 目录\n$ cd &lt;解压目录&gt;/bin\n# 安装 Apache 服务，-n 参数是指定服务名称\n$ httpd.exe -k install -n \"Apache\"\n# 如果需要卸载 Apache，可以执行以下命令\n$ httpd.exe -k uninstall -n \"Apache\"\n</code></pre><p>执行安装命令过后会报一个错，原因是默认的配置文件有问题，需要先调整一下配置文件 <code>conf/httpd.conf</code>，才能正常启动服务。</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1505988989079.png\" class=\"kg-image\" alt=\"1505988989079\"></figure><p>找到 Apache 解压目录中的 conf 目录下的 httpd.conf 文件，定位到 37 行，将 <code>c:/Apache24</code> 改为解压目录，我这里解压到路径是 <code>C:/Develop/apache</code>，所以我这里修改</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1505995465005.png\" class=\"kg-image\" alt=\"1505995465005\"></figure><p>修改完以后，执行以下命令重新测试配置文件是否通过。</p><pre><code>$ httpd.exe -t\n</code></pre><p>这里任然报错：</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1505995651671.png\" class=\"kg-image\" alt=\"1505995651671\"></figure><p>通过错误信息得知，这里是因为另外一个地方配置的目录不存在导致的，所以接着调整 246 行的 <code>DocumentRoot</code> 选项：</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1505996335305.png\" class=\"kg-image\" alt=\"1505996335305\"></figure><p>随即，我们发现这个配置文件中有很多默认配置选项中的路径都是 <code>c:/Apache24</code>，所以我们批量都修改为我们解压的目录路径。</p><p>然后重新执行 <code>httpd.exe -t</code> 测试配置文件，这时候应该提示 <code>Syntax OK</code>。</p><blockquote>如果有关于 <code>ServerName</code> 的警告提示，不用管它，暂时还不会影响我们接下来的使用和操作。</blockquote><p>接着运行以下命令重新启动 Apache 服务：</p><pre><code># 注意：需要使用管理员身份运行命令行！！！\n$ httpd.exe -k start -n \"Apache\"\n# 重新启动 Apache 服务\n$ httpd.exe -k restart -n \"Apache\"\n# 停止 Apache 服务\n$ httpd.exe -k stop -n \"Apache\"\n</code></pre><p>回到浏览器中，地址栏输入：<a href=\"http://localhost/%EF%BC%8C%E5%9B%9E%E8%BD%A6%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%BF%99%E6%97%B6%E6%AD%A3%E5%B8%B8%E5%BA%94%E8%AF%A5%E7%9C%8B%E5%88%B0\">http://localhost/，回车访问，这时正常应该看到</a> <code>It works!</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1505997349857.png\" class=\"kg-image\" alt=\"1505997349857\"></figure><h3 id=\"-web--2\">提供 Web 服务</h3><p>启动 Apache，让别人可以使用你机器上安装的 Apache 提供的 Web 服务，访问你机器上的网站。<strong>这种情况下你的机器就是服务器，别人的机器就是客户端</strong>。</p><p><strong>注意</strong>：</p><ul><li>确保配置文件语法检查通过</li><li>确保 <code>80</code> 端口没有被其他程序占用</li><li>确保防火墙允许 <code>80</code> 端口的请求，或者干脆关掉防火墙</li><li>如果出现 <strong>Forbidden</strong> 情况，确保配置文件 <code>httpd.conf</code> 中 247 行（<code>DocumentRoot</code> 之后）的 <code>Directory</code> 配置的与 <code>DocumentRoot</code> 路径相同</li><li>我们在开发阶段大多数都是自己访问自己机器上的网站，那这种情况下，我们既是服务端又是客户端。**对于新手来说，最常见的问题就是分不清楚哪是客户端应该有的，哪是服务端应该有的。**这种时候一定要保持清醒，客户端就是浏览器能看到的，代码以及 Apache 相关的文件和配置都是服务端的。</li></ul><h2 id=\"--3\">网络基础概念（必要）</h2><h3 id=\"ip-\">IP 地址</h3><blockquote>Internet Protocol Address</blockquote><p>设备在某一个网络中的地址，目前最常见的格式：<code>[0-255].[0-255].[0-255].[0-255]</code> 即为四个 0-255 的数字组成。</p><p>作用就是标识一个网络设备（计算机、手机、电视）在<strong>某一个具体的网络</strong>当中的地址。</p><p>127.0.0.1 是本地回环地址</p><h4 id=\"--4\">单个网络情况</h4><p>在单个局域网下，结构非常简单，就是我们所连接的网络设备（网关）给我们分配了一个地址，在<strong>这个范围之内</strong>我们都可以通过这个地址找到我们的这个设备。</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/single-network.png\" class=\"kg-image\" alt=\"单个局域网情况\"></figure><h4 id=\"--5\">多个网络情况</h4><p>但是当一个设备同时处于多个网络下（比如同时连接了有线网卡和无线网卡），就会变得稍微复杂一点：</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/multiple-network.png\" class=\"kg-image\" alt=\"multiple-network\"></figure><blockquote>例如：小明这个同学同时报名了两个课程，在 A 班级小明是班长，所有 A 班级的同学都管他叫班长（叫班长就能找到他）。而在 B 班级小明是课代表，所有 B 班的同学都管他叫课代表（叫课代表就能找到他）。同样的一个人在不同的环境有不同的身份，这些身份只有特定的环境才生效。</blockquote><blockquote>纸上得来终觉浅，绝知此事要躬行！多尝试，多思考才能更好的理解这个问题。</blockquote><h3 id=\"--6\">域名</h3><p>由于 IP 地址都是没有规律的一些数字组成的，很难被人记住，不利于传播，所以就有人想出来要给 IP 起名字（别名）。</p><blockquote>域名是需要花钱注册的</blockquote><h3 id=\"dns\">DNS</h3><p>通过宽带运营商提供的服务器解析一个域名背后对应的 IP，这个过程叫做 <strong>DNS 寻址</strong>，帮你完成 DNS 寻址过程的服务器叫做 <strong>DNS 服务器</strong>。</p><blockquote><code>C:WindowsSystem32driversetchosts</code> 文件是本机的 DNS 依据<strong>注意</strong>：只能影响本机的 DNS 寻址必须以管理员权限运行的编辑器才有权利修改 <code>hosts</code> 文件</blockquote><h3 id=\"--7\">端口</h3><p>计算机本身是一个封闭的环境，就像是一个大楼，如果需要有数据通信往来，必须有门，这个门在术语中就叫端口，每一个端口都有一个编号（0-65535）</p><blockquote>可以通过 <code>netstat</code> 监视本机端口使用情况占门过程叫做监听http 默认的端口 80https 默认的端口是 443</blockquote><h2 id=\"--8\">请求响应流程</h2><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://zce-sandbox.uieee.com/2018/10/http-req-res.png\" class=\"kg-image\" alt=\"HTTP请求和响应\"></figure><ol><li>用户打开浏览器</li><li>地址栏输入我们需要访问的网站网址（URL）</li><li>浏览器通过 DNS 服务器获取即将访问的网站 IP</li><li>浏览器发起一个对这个 IP 的请求</li><li>服务端接收到这个请求，进行相应的处理（如果是静态文件请求，就读取这个文件）</li><li>服务端将处理完的结果返回给客户端浏览器</li><li>浏览器将服务端返回的结果呈现到界面上</li></ol><h2 id=\"-apache\">配置 Apache</h2><blockquote>配置文档：<a href=\"http://httpd.apache.org/docs/current/\">http://httpd.apache.org/docs/current/</a>配置文件中行首的 <code>#</code> 指的是注释</blockquote><h3 id=\"--9\">监听端口</h3><p><strong>监听端口</strong>可以随意修改为任意一个未被其他程序监听的端口，可以通过设置配置文件 <code>httpd.conf</code> 中的 <code>Listen</code> 指令后面的数字修改。</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1506132097583.png\" class=\"kg-image\" alt=\"1506132097583\"></figure><h3 id=\"--10\">网站根目录</h3><blockquote><strong>网站根目录</strong>就是存放我们网站文件的最顶层目录，通常 URL 中域名后面的第一个斜线对应（映射）的就是网站根目录。<strong>注</strong>：动态网站情况会比较特殊，需要单独考虑，不一定是这个规则。默认文档指的是我们在在访问一个目录时（没有指定其他访问哪个文件），默认返回的文件叫做默认文档</blockquote><p>默认 Apache 的网站根目录是安装目录中的 <code>htdocs</code> 文件夹，为了方便对网站文件的管理，一般我们会将其设置在一个自定义目录中（如果你不介意其实也无所谓）。</p><p>如果需要设置网站根目录，可以通过修改配置文件 <code>httpd.conf</code> 中的网站根目录选项切换。</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1505998898900.png\" class=\"kg-image\" alt=\"1505998898900\"></figure><h3 id=\"--11\">默认文档</h3><blockquote>当客户端访问的是一个目录而不是具体文件时，服务端默认返回这个目录下的某个文档（文件），这个文档就称之为<strong>默认文档</strong>。</blockquote><p>配置文件 <code>httpd.conf</code> 的 280 行的 <code>DirectoryIndex</code>，默认文档可以配置多个（有前到后依次去找，找到为止，如果没找到任何一个则启用目录浏览）：</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1506132675132.png\" class=\"kg-image\" alt=\"1506132675132\"></figure><h3 id=\"--12\">虚拟主机</h3><p>如果一台机器上只有一个网站的话，没有任何问题，但是如果想要在一台机器上部署多个站点，就必须通过配置虚拟主机的方式解决。</p><blockquote>由于后期对虚拟主机的配置操作非常常见，所以我们一般将虚拟主机的配置单独放到一个配置文件中，然后在主配置文件中引入，避免破坏主配置文件中的其他配置。<code>Include conf/extra/httpd-vhosts.conf</code> 配置的作用就将另外一个配置文件引入（使其生效）</blockquote><p>具体的操作方式就是在主配置文件 <code>httpd.conf</code> 的 505 行取消注释：</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1505999461533.png\" class=\"kg-image\" alt=\"1505999461533\"></figure><p>然后找到 Apache 的虚拟主机配置文件，添加一个如下的虚拟主机配置节点，然后重新启动 Apache。</p><blockquote>这个文件中有两个默认的示例配置，可以注释掉</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1506136421939.png\" class=\"kg-image\" alt=\"1506136421939\"></figure><p>如果真的要使用 <code>baixiu.com</code> 这个域名的话，就只能通过修改 <code>hosts</code> 文件达到目的，原因很简单：这个域名不是我们自己的，我们没有办法修改这个域名在公网上的 DNS。</p><blockquote>注意：如果使用了虚拟主机，则默认必须全部使用虚拟主机，即之前的默认网站也必须通过虚拟主机方式配置，否则访问不到。参考：<a href=\"http://skypegnu1.blog.51cto.com/8991766/1532454\">http://skypegnu1.blog.51cto.com/8991766/1532454</a>如果虚拟主机的端口使用的不是 <code>80</code>，则需要在主配置文件中添加一个对这个端口的监听：</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1506001971125.png\" class=\"kg-image\" alt=\"1506001971125\"></figure><h2 id=\"--13\">静态网站与动态网站</h2><p>至此，我们已经可以把这些静态页面放到服务器上了，客户端也可以通过域名请求这个网站，但是对于我们来说，Apache 能够完成的事情过于简单，无外乎就是找到你请求对应的文件 → 读取文件 → 将文件内容响应给客户端浏览器（<strong>文件原封不动的给你</strong>）。无法满足让网页内容动起来（动态变化）的需求。</p><p>于是乎，就有人提出了服务端动态网页的概念，这种实现这种概念的技术有很多种：JSP、ASP.NET、PHP、Node 等等。</p><p>这些技术的原理就是：不再将 HTML 固定写死，每次用户请求时，动态执行一段代码，临时生成一个用户想要的 HTML 页面。</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://zce-sandbox.uieee.com/2018/10/apache-process.png#full\" class=\"kg-image\" alt=\"apache-process\"></figure><p><strong>动态网站指的也就是每次请求时服务端动态生成 HTML 返回给用户的这种网站。</strong></p><p>这里我们选择 PHP 作为我们了解服务端动态网页开发的技术方案，注意：我们学习的重心不在 PHP，而是了解服务端开发，以及某些其他对前端开发有帮助的东西。</p><h3 id=\"-php-\">配置 PHP 支持</h3><blockquote>PHP 文件的扩展名就是 <code>.php</code></blockquote><p>我们可以尝试在刚刚配置的网站中添加一个扩展名为 <code>php</code> 的文件，然后到浏览器中访问它。</p><pre><code>&lt;!-- demo.php --&gt;\n&lt;?php echo 'Hello PHP'; ?&gt;\n</code></pre><p>结果出乎意料，并没有显示我们想要的 <code>Hello PHP</code>，而是将我们的代码原封不动的返回给浏览器了。</p><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/1506004529597.png\" class=\"kg-image\" alt=\"1506004529597\"></figure><p>原因很简单：Apache 只能处理静态文件请求，对于后缀名为 <code>.php</code> 这种动态文件，它无法执行，所以就当成是一个静态文件直接返回了。</p><p><strong>解决方法</strong>：</p><ul><li> 在服务器上安装 PHP  解压 php 到纯英文路径目录中  </li><li> 在 Apache 中添加支持 PHP 的配置   在 Apache 添加 PHP 处理模块 <code># php support LoadModule php7_module C:/Develop/php/php7apache2_4.dll </code>   在 <code>&lt;IfModule mime_module&gt;</code> 节点中添加 <code>.php</code> 扩展名解析支持 <code># parse .php files AddType application/x-httpd-php .php </code>   默认文档配置节点 <code>&lt;IfModule dir_module&gt;</code> 中添加 <code>index.php</code>  默认文档指的是在访问一个目录而不是具体文件名时，默认执行的文件名  <code>&lt;IfModule dir_module&gt;     DirectoryIndex index.html index.php &lt;/IfModule&gt; </code> ​   </li><li> 重启 Apache </li></ul><figure class=\"kg-card kg-image-card\"><img src=\"https://zce-sandbox.uieee.com/2018/10/apache-php.png\" class=\"kg-image\" alt=\"apache-php\"></figure><blockquote>可以理解成 Apache 是一家没有太多能力的公司，只能处理一些简单的业务，但是心很大想做更多的事，所以就想到了外包，所有额外的业务都需要外包给其他程序（而 PHP 就是一个专门能处理 php 这个业务的外包公司）</blockquote><h2 id=\"--14\">作业</h2><ul><li>安装 Apache 并配置，确保本机可以访问。</li><li>同桌相互访问对方提供的 Web 服务。</li><li>让 Apache 支持 php 文件的运行。</li></ul>",
            "plaintext": "建立你的第一个网站（目标）\n前端开发最终还是属于Web 开发中的一个分支，想要成为一名合格的前端开发人员，就必须要充分理解 Web 的概念。\n构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的\nBlog 网站并不难（其实再大的系统也是由一些基础功能叠加出来的），所以咱们就从这个话题开始聊。\n\n如何建立一个 Blog 网站\n提问：到底什么是网站？可以在浏览器上通过一个地址直接访问使用用于提供一种（或多种）特定服务的一系列具备相关性的网页组合的整体例如：博客、门户、电商、在线教育等\n有了明确的目标过后，我们需要规划具体的业务方案，学习特定的技能，完成各项功能，解决各种过程中出现的问题。\n\n之前学习了什么？\n在之前的学习过程中，我们很专注，没有关心这些东西在整体中是什么角色，起到什么作用。这里我们是时候总结一下我们之前学过了的内容：\n\n * 网页开发技术（硬性）  HTML —— 网页内容结构（GUI） CSS —— 网页外观样式（GUI） JavaScript ——\n   编程语言，可以用于调用浏览器提供的 API Web APIs —— 网页交互（业务功能）DOM BOM jQuery —— 糖果而已，不是必要的\n * 编程能力 / 编程思想 / 解决问题的思路（软性）  我要做什么（我要得到什么），我目前有什么（我能拿到什么）\n\n至此，我们已经可以独立完成网页开发了，具体能完成的东西就是一个一个的网页，而且还能给这个页面加上一些动态的交互。但是这距离成为一个网站还有一些路要走。\n\nwebpage=>operation: 网页开发\nwebsite=>operation: 网站开发\napplication=>operation: 应用开发\n\nwebpage(right)->website(right)->application\n\n\n还需要学习什么？\n想要完成完整的 Web 网站，还需要学习什么？\n\n * 搭建 WEB 服务器\n * HTTP（浏览器与服务端的通讯协议）\n * 服务端开发（动态网页技术）\n * 数据库操作\n * AJAX（浏览器与服务端的数据交互方式）\n\n搭建 Web 服务器\n服务器（提供服务）指的就是一台安装特定的软件的公共计算机，用于专门用于提供特定的服务。 按照服务类型的不同，又划分为：Web\n服务器、数据库服务器、文件服务器等等。客户端（使用服务）指的是在一次服务过程中使用这个服务的设备（网络端点）。 目前咱们最常见的客户端就是浏览器\n我们手头上的这些网页，如果想要成为一个网站，首先要完成的第一件事就是有一台公共的 Web 服务器，把这一系列的页面放到这台 Web\n服务器上，让用户可以通过服务器的地址访问到这些网页。\n\n提问：为什么不放在我们自己电脑上呢？那么，哪里有这样的服务器呢？\n\n我们手头上的电脑都可以是一台服务器，因为服务器是一个相对的概念，只要能提供服务就可以是一个服务器（提供服务的时候就是服务端，使用服务的时候就是客户端）。\n\n既然服务器就是安装特定的软件的计算机，那么要让自己的成为 Web 服务器就是要安装一个 Web 服务器软件。\n\nWeb 服务器软件\n * Nginx ········································ 反向代理\n * Apache ····································· PHP\n * IIS ·············································· ASP.NET\n * Tomcat  ····································· Java\n\n安装 Web 服务器软件\n这里我们选择一个比较常用的 Web 服务器软件：Apache HTTP Server。\n\n如果使用的是安装版，与其他软件相同，安装无外乎就是一路点下一步，只是需要注意安装目录路径中不要有中文。由于最新的 Apache 已经不提供 Windows\n的安装版本了，所以我们这里使用的是解压版。\n\n下载地址：https://www.apachelounge.com/download/使用说明：\nhttps://httpd.apache.org/docs/current/platform/windows.html\n安装方式如下，先解压到纯英文路径的文件夹，然后执行以下命令：\n\n# 注意：需要使用管理员身份运行命令行！！！\n# 切换到 Apache 解压路径中的 bin 目录\n$ cd <解压目录>/bin\n# 安装 Apache 服务，-n 参数是指定服务名称\n$ httpd.exe -k install -n \"Apache\"\n# 如果需要卸载 Apache，可以执行以下命令\n$ httpd.exe -k uninstall -n \"Apache\"\n\n\n执行安装命令过后会报一个错，原因是默认的配置文件有问题，需要先调整一下配置文件 conf/httpd.conf，才能正常启动服务。\n\n找到 Apache 解压目录中的 conf 目录下的 httpd.conf 文件，定位到 37 行，将 c:/Apache24 \n改为解压目录，我这里解压到路径是 C:/Develop/apache，所以我这里修改\n\n修改完以后，执行以下命令重新测试配置文件是否通过。\n\n$ httpd.exe -t\n\n\n这里任然报错：\n\n通过错误信息得知，这里是因为另外一个地方配置的目录不存在导致的，所以接着调整 246 行的 DocumentRoot  选项：\n\n随即，我们发现这个配置文件中有很多默认配置选项中的路径都是 c:/Apache24，所以我们批量都修改为我们解压的目录路径。\n\n然后重新执行 httpd.exe -t  测试配置文件，这时候应该提示 Syntax OK。\n\n如果有关于 ServerName  的警告提示，不用管它，暂时还不会影响我们接下来的使用和操作。接着运行以下命令重新启动 Apache 服务：\n\n# 注意：需要使用管理员身份运行命令行！！！\n$ httpd.exe -k start -n \"Apache\"\n# 重新启动 Apache 服务\n$ httpd.exe -k restart -n \"Apache\"\n# 停止 Apache 服务\n$ httpd.exe -k stop -n \"Apache\"\n\n\n回到浏览器中，地址栏输入：http://localhost/，回车访问，这时正常应该看到\n[http://localhost/%EF%BC%8C%E5%9B%9E%E8%BD%A6%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%BF%99%E6%97%B6%E6%AD%A3%E5%B8%B8%E5%BA%94%E8%AF%A5%E7%9C%8B%E5%88%B0] \n It works!\n\n提供 Web 服务\n启动 Apache，让别人可以使用你机器上安装的 Apache 提供的 Web 服务，访问你机器上的网站。这种情况下你的机器就是服务器，别人的机器就是客户端。\n\n注意：\n\n * 确保配置文件语法检查通过\n * 确保 80  端口没有被其他程序占用\n * 确保防火墙允许 80  端口的请求，或者干脆关掉防火墙\n * 如果出现 Forbidden  情况，确保配置文件 httpd.conf  中 247 行（DocumentRoot  之后）的 Directory \n   配置的与 DocumentRoot  路径相同\n * 我们在开发阶段大多数都是自己访问自己机器上的网站，那这种情况下，我们既是服务端又是客户端。**对于新手来说，最常见的问题就是分不清楚哪是客户端应该有的，哪是服务端应该有的。**这种时候一定要保持清醒，客户端就是浏览器能看到的，代码以及\n   Apache 相关的文件和配置都是服务端的。\n\n网络基础概念（必要）\nIP 地址\nInternet Protocol Address设备在某一个网络中的地址，目前最常见的格式：[0-255].[0-255].[0-255].[0-255]  即为四个 0-255 的数字组成。\n\n作用就是标识一个网络设备（计算机、手机、电视）在某一个具体的网络当中的地址。\n\n127.0.0.1 是本地回环地址\n\n单个网络情况\n在单个局域网下，结构非常简单，就是我们所连接的网络设备（网关）给我们分配了一个地址，在这个范围之内我们都可以通过这个地址找到我们的这个设备。\n\n多个网络情况\n但是当一个设备同时处于多个网络下（比如同时连接了有线网卡和无线网卡），就会变得稍微复杂一点：\n\n例如：小明这个同学同时报名了两个课程，在 A 班级小明是班长，所有 A 班级的同学都管他叫班长（叫班长就能找到他）。而在 B 班级小明是课代表，所有 B\n班的同学都管他叫课代表（叫课代表就能找到他）。同样的一个人在不同的环境有不同的身份，这些身份只有特定的环境才生效。\n纸上得来终觉浅，绝知此事要躬行！多尝试，多思考才能更好的理解这个问题。域名\n由于 IP 地址都是没有规律的一些数字组成的，很难被人记住，不利于传播，所以就有人想出来要给 IP 起名字（别名）。\n\n域名是需要花钱注册的DNS\n通过宽带运营商提供的服务器解析一个域名背后对应的 IP，这个过程叫做 DNS 寻址，帮你完成 DNS 寻址过程的服务器叫做 DNS 服务器。\n\nC:WindowsSystem32driversetchosts  文件是本机的 DNS 依据注意：只能影响本机的 DNS\n寻址必须以管理员权限运行的编辑器才有权利修改 hosts  文件端口\n计算机本身是一个封闭的环境，就像是一个大楼，如果需要有数据通信往来，必须有门，这个门在术语中就叫端口，每一个端口都有一个编号（0-65535）\n\n可以通过 netstat  监视本机端口使用情况占门过程叫做监听http 默认的端口 80https 默认的端口是 443请求响应流程\n 1. 用户打开浏览器\n 2. 地址栏输入我们需要访问的网站网址（URL）\n 3. 浏览器通过 DNS 服务器获取即将访问的网站 IP\n 4. 浏览器发起一个对这个 IP 的请求\n 5. 服务端接收到这个请求，进行相应的处理（如果是静态文件请求，就读取这个文件）\n 6. 服务端将处理完的结果返回给客户端浏览器\n 7. 浏览器将服务端返回的结果呈现到界面上\n\n配置 Apache\n配置文档：http://httpd.apache.org/docs/current/配置文件中行首的 #  指的是注释监听端口\n监听端口可以随意修改为任意一个未被其他程序监听的端口，可以通过设置配置文件 httpd.conf  中的 Listen  指令后面的数字修改。\n\n网站根目录\n网站根目录就是存放我们网站文件的最顶层目录，通常 URL 中域名后面的第一个斜线对应（映射）的就是网站根目录。注\n：动态网站情况会比较特殊，需要单独考虑，不一定是这个规则。默认文档指的是我们在在访问一个目录时（没有指定其他访问哪个文件），默认返回的文件叫做默认文档默认\nApache 的网站根目录是安装目录中的 htdocs  文件夹，为了方便对网站文件的管理，一般我们会将其设置在一个自定义目录中（如果你不介意其实也无所谓）。\n\n如果需要设置网站根目录，可以通过修改配置文件 httpd.conf  中的网站根目录选项切换。\n\n默认文档\n当客户端访问的是一个目录而不是具体文件时，服务端默认返回这个目录下的某个文档（文件），这个文档就称之为默认文档。配置文件 httpd.conf  的 280 行的 DirectoryIndex\n，默认文档可以配置多个（有前到后依次去找，找到为止，如果没找到任何一个则启用目录浏览）：\n\n虚拟主机\n如果一台机器上只有一个网站的话，没有任何问题，但是如果想要在一台机器上部署多个站点，就必须通过配置虚拟主机的方式解决。\n\n由于后期对虚拟主机的配置操作非常常见，所以我们一般将虚拟主机的配置单独放到一个配置文件中，然后在主配置文件中引入，避免破坏主配置文件中的其他配置。Include\nconf/extra/httpd-vhosts.conf  配置的作用就将另外一个配置文件引入（使其生效）具体的操作方式就是在主配置文件 httpd.conf  的 505 行取消注释：\n\n然后找到 Apache 的虚拟主机配置文件，添加一个如下的虚拟主机配置节点，然后重新启动 Apache。\n\n这个文件中有两个默认的示例配置，可以注释掉如果真的要使用 baixiu.com  这个域名的话，就只能通过修改 hosts \n文件达到目的，原因很简单：这个域名不是我们自己的，我们没有办法修改这个域名在公网上的 DNS。\n\n注意：如果使用了虚拟主机，则默认必须全部使用虚拟主机，即之前的默认网站也必须通过虚拟主机方式配置，否则访问不到。参考：\nhttp://skypegnu1.blog.51cto.com/8991766/1532454如果虚拟主机的端口使用的不是 80\n，则需要在主配置文件中添加一个对这个端口的监听：静态网站与动态网站\n至此，我们已经可以把这些静态页面放到服务器上了，客户端也可以通过域名请求这个网站，但是对于我们来说，Apache\n能够完成的事情过于简单，无外乎就是找到你请求对应的文件 → 读取文件 → 将文件内容响应给客户端浏览器（文件原封不动的给你\n）。无法满足让网页内容动起来（动态变化）的需求。\n\n于是乎，就有人提出了服务端动态网页的概念，这种实现这种概念的技术有很多种：JSP、ASP.NET、PHP、Node 等等。\n\n这些技术的原理就是：不再将 HTML 固定写死，每次用户请求时，动态执行一段代码，临时生成一个用户想要的 HTML 页面。\n\n动态网站指的也就是每次请求时服务端动态生成 HTML 返回给用户的这种网站。\n\n这里我们选择 PHP 作为我们了解服务端动态网页开发的技术方案，注意：我们学习的重心不在 PHP，而是了解服务端开发，以及某些其他对前端开发有帮助的东西。\n\n配置 PHP 支持\nPHP 文件的扩展名就是 .php我们可以尝试在刚刚配置的网站中添加一个扩展名为 php  的文件，然后到浏览器中访问它。\n\n<!-- demo.php -->\n<?php echo 'Hello PHP'; ?>\n\n\n结果出乎意料，并没有显示我们想要的 Hello PHP，而是将我们的代码原封不动的返回给浏览器了。\n\n原因很简单：Apache 只能处理静态文件请求，对于后缀名为 .php  这种动态文件，它无法执行，所以就当成是一个静态文件直接返回了。\n\n解决方法：\n\n *   在服务器上安装 PHP  解压 php 到纯英文路径目录中\n *   在 Apache 中添加支持 PHP 的配置   在 Apache 添加 PHP 处理模块 # php support LoadModule\n   php7_module C:/Develop/php/php7apache2_4.dll 在 <IfModule mime_module>  节点中添加 \n   .php  扩展名解析支持 # parse .php files AddType application/x-httpd-php .php \n   默认文档配置节点 <IfModule dir_module>  中添加 index.php \n    默认文档指的是在访问一个目录而不是具体文件名时，默认执行的文件名<IfModule dir_module>     DirectoryIndex\n   index.html index.php </IfModule> ​   \n *   重启 Apache \n\n可以理解成 Apache 是一家没有太多能力的公司，只能处理一些简单的业务，但是心很大想做更多的事，所以就想到了外包，所有额外的业务都需要外包给其他程序（而\nPHP 就是一个专门能处理 php 这个业务的外包公司）作业\n * 安装 Apache 并配置，确保本机可以访问。\n * 同桌相互访问对方提供的 Web 服务。\n * 让 Apache 支持 php 文件的运行。",
            "feature_image": "https://images.unsplash.com/photo-1518432031352-d6fc5c10da5a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=2ac2a0ba9c4b41180fa2038665684948",
            "status": "published",
            "created_at": "2010-01-01 00:00:00",
            "updated_at": "2010-01-01 00:00:00",
            "published_at": "2010-01-01 00:00:00"
          }
        ]
      }
    }
  ]
}
